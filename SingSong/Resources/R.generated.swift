//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `bgBlack`.
    static let bgBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "bgBlack")
    /// Color `singSongGreen`.
    static let singSongGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "singSongGreen")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "bgBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bgBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bgBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "singSongGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func singSongGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.singSongGreen, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `Add_Button`.
    static let add_Button = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add_Button")
    /// Image `ShowLyrycs`.
    static let showLyrycs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowLyrycs")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `key_minus_off`.
    static let key_minus_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "key_minus_off")
    /// Image `key_minus_on`.
    static let key_minus_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "key_minus_on")
    /// Image `key_plus_off`.
    static let key_plus_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "key_plus_off")
    /// Image `key_plus_on`.
    static let key_plus_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "key_plus_on")
    /// Image `key_view`.
    static let key_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "key_view")
    /// Image `noImage`.
    static let noImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "noImage")
    /// Image `songTab`.
    static let songTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "songTab")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add_Button", bundle: ..., traitCollection: ...)`
    static func add_Button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_Button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShowLyrycs", bundle: ..., traitCollection: ...)`
    static func showLyrycs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showLyrycs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key_minus_off", bundle: ..., traitCollection: ...)`
    static func key_minus_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key_minus_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key_minus_on", bundle: ..., traitCollection: ...)`
    static func key_minus_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key_minus_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key_plus_off", bundle: ..., traitCollection: ...)`
    static func key_plus_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key_plus_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key_plus_on", bundle: ..., traitCollection: ...)`
    static func key_plus_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key_plus_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key_view", bundle: ..., traitCollection: ...)`
    static func key_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key_view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noImage", bundle: ..., traitCollection: ...)`
    static func noImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "songTab", bundle: ..., traitCollection: ...)`
    static func songTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.songTab, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `SongLargeCell`.
    static let songLargeCell = _R.nib._SongLargeCell()
    /// Nib `SongMediumCell`.
    static let songMediumCell = _R.nib._SongMediumCell()
    /// Nib `SongSmallCell`.
    static let songSmallCell = _R.nib._SongSmallCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SongLargeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.songLargeCell) instead")
    static func songLargeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.songLargeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SongMediumCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.songMediumCell) instead")
    static func songMediumCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.songMediumCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SongSmallCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.songSmallCell) instead")
    static func songSmallCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.songSmallCell)
    }
    #endif

    static func songLargeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongLargeCell? {
      return R.nib.songLargeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongLargeCell
    }

    static func songMediumCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongMediumCell? {
      return R.nib.songMediumCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongMediumCell
    }

    static func songSmallCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongSmallCell? {
      return R.nib.songSmallCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongSmallCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SongLargeCell.validate()
      try _SongSmallCell.validate()
    }

    struct _SongLargeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SongLargeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongLargeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongLargeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "noImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noImage' is used in nib 'SongLargeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "bgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgBlack' is used in storyboard 'SongLargeCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "singSongGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'singSongGreen' is used in storyboard 'SongLargeCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SongMediumCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SongMediumCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongMediumCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongMediumCell
      }

      fileprivate init() {}
    }

    struct _SongSmallCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SongSmallCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SongSmallCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SongSmallCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add_Button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add_Button' is used in nib 'SongSmallCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ShowLyrycs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ShowLyrycs' is used in nib 'SongSmallCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "key_minus_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'key_minus_on' is used in nib 'SongSmallCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "key_plus_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'key_plus_on' is used in nib 'SongSmallCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "key_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'key_view' is used in nib 'SongSmallCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "bgBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgBlack' is used in storyboard 'SongSmallCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "singSongGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'singSongGreen' is used in storyboard 'SongSmallCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
